import type { Variable } from "../..";
import type { Expr } from "../../types";
import { CypherFunction } from "./CypherFunctions";
/**
 * @see [Cypher Documentation](https://neo4j.com/docs/cypher-manual/current/functions/scalar/#functions-size)
 * @group Cypher Functions
 * @category List
 */
export declare function size(expr: Expr): CypherFunction;
/**
 * @see [Cypher Documentation](https://neo4j.com/docs/cypher-manual/current/functions/scalar/#functions-head)
 * @group Cypher Functions
 * @category List
 */
export declare function head(expr: Expr): CypherFunction;
/**
 * @see [Cypher Documentation](https://neo4j.com/docs/cypher-manual/current/functions/scalar/#functions-last)
 * @group Cypher Functions
 * @category List
 */
export declare function last(expr: Expr): CypherFunction;
/**
 * @see [Cypher Documentation](https://neo4j.com/docs/cypher-manual/current/functions/list/#functions-labels)
 * @group Cypher Functions
 * @category List
 */
export declare function labels(nodeRef: Variable): CypherFunction;
/** Reduce a list by executing given expression.
 * @see [Cypher Documentation](https://neo4j.com/docs/cypher-manual/current/functions/list/#functions-reduce)
 * @group Cypher Functions
 * @category List
 * @example
 * ```ts
 * Cypher.reduce(totalAge, new Cypher.Literal(0), n, Cypher.nodes(p), Cypher.plus(totalAge, n.property("age")));
 * ```
 * _Cypher:_
 * ```cypher
 * reduce(totalAge = 0, n IN nodes(p) | totalAge + n.age)
 * ```
 */
export declare function reduce(accVariable: Variable, defaultValue: Expr, variable: Variable, listExpr: Expr, mapExpr: Expr): CypherFunction;
