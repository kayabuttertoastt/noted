import type { Driver, QueryResult, Session, SessionMode, Transaction, SessionConfig } from "neo4j-driver";
import type { CypherQueryOptions } from "../types";
import type { AuthContext } from "../types/deprecated/auth/auth-context";
import type { GraphQLResolveInfo } from "graphql";
export type ExecutionContext = Driver | Session | Transaction;
export type ExecutorConstructorParam = {
    executionContext: ExecutionContext;
    auth?: AuthContext;
    queryOptions?: CypherQueryOptions;
    sessionConfig?: SessionConfig;
};
export type ExecutorResult = {
    result: QueryResult;
};
export type Neo4jGraphQLSessionConfig = Pick<SessionConfig, "database" | "impersonatedUser" | "auth">;
export declare class Executor {
    private executionContext;
    lastBookmark: string | null;
    private queryOptions;
    private auth;
    private sessionConfig;
    constructor({ executionContext, auth, queryOptions, sessionConfig }: ExecutorConstructorParam);
    execute(query: string, parameters: unknown, defaultAccessMode: SessionMode, info?: GraphQLResolveInfo): Promise<ExecutorResult>;
    private formatError;
    private generateQuery;
    private generateParameters;
    private getSessionConfig;
    private getTransactionConfig;
    private sessionRun;
    private transactionRun;
}
//# sourceMappingURL=Executor.d.ts.map