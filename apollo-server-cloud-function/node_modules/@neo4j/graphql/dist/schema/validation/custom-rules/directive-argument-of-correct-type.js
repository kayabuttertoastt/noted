"use strict";
/*
 * Copyright (c) "Neo4j"
 * Neo4j Sweden AB [http://neo4j.com]
 *
 * This file is part of Neo4j.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.DirectiveArgumentOfCorrectType = void 0;
const graphql_1 = require("graphql");
const validation_error_codes_1 = require("../utils/validation-error-codes");
function DirectiveArgumentOfCorrectType(context) {
    const schema = (0, graphql_1.buildASTSchema)(context.getDocument(), { assumeValid: true, assumeValidSDL: true });
    return {
        Directive(directiveNode, _key, _parent, path, ancenstors) {
            const genericDirectiveName = ["subscriptionsAuthorization", "authorization", "authentication"].find((applicableDirectiveName) => directiveNode.name.value.toLowerCase().includes(applicableDirectiveName.toLowerCase()));
            // Validate only Authorization/Authentication usage
            if (!genericDirectiveName) {
                return;
            }
            const directiveDefinition = schema.getDirective(directiveNode.name.value);
            if (!directiveDefinition) {
                // Do not report, delegate this report to KnownDirectivesRule
                return;
            }
            const pathToHere = [...getPathToDirectiveNode(path, ancenstors), `@${genericDirectiveName}`];
            directiveNode.arguments?.forEach((argument) => {
                const argumentDefinition = findArgumentDefinitionNodeByName(directiveDefinition.args, argument.name.value);
                if (!argumentDefinition) {
                    return;
                }
                const { isValid, errorMsg, errorPath } = assertArgumentType(argument, argumentDefinition);
                if (!isValid) {
                    const errorOpts = {
                        nodes: [argument, directiveNode],
                        extensions: {
                            exception: { code: validation_error_codes_1.VALIDATION_ERROR_CODES[genericDirectiveName.toUpperCase()] },
                        },
                        path: [...pathToHere, argument.name.value, ...errorPath],
                        source: undefined,
                        positions: undefined,
                        originalError: undefined,
                    };
                    // TODO: replace constructor to use errorOpts when dropping support for GraphQL15
                    context.reportError(new graphql_1.GraphQLError(`Invalid argument: ${argument.name.value}, error: ${errorMsg}`, errorOpts.nodes, errorOpts.source, errorOpts.positions, errorOpts.path, errorOpts.originalError, errorOpts.extensions));
                }
            });
        },
    };
}
exports.DirectiveArgumentOfCorrectType = DirectiveArgumentOfCorrectType;
function findArgumentDefinitionNodeByName(args, name) {
    return args.find((arg) => arg.name === name);
}
function getPathToDirectiveNode(path, ancenstors) {
    const documentASTNodes = ancenstors[1];
    if (!documentASTNodes || (Array.isArray(documentASTNodes) && !documentASTNodes.length)) {
        return [];
    }
    const [, definitionIdx] = path;
    const traversedDefinition = documentASTNodes[definitionIdx];
    const pathToHere = [traversedDefinition?.name?.value];
    const getNextDefinition = parsePath(path, traversedDefinition);
    for (const definition of getNextDefinition()) {
        pathToHere.push(definition.name.value);
    }
    return pathToHere;
}
function parsePath(path, traversedDefinition) {
    return function* getNextDefinition(idx = 2) {
        while (path[idx] && path[idx] !== "directives") {
            // continue parsing for annotated fields
            const key = path[idx];
            const idxAtKey = path[idx + 1];
            traversedDefinition = traversedDefinition[key][idxAtKey];
            yield traversedDefinition;
            idx += 2;
        }
    };
}
function assertArgumentType(argumentNode, inputValueDefinition) {
    const argType = inputValueDefinition.type;
    const argValue = (0, graphql_1.valueFromASTUntyped)(argumentNode.value);
    let isValid = true;
    let errorMsg, errorPath;
    const onError = (_path, _invalidValue, error) => {
        isValid = false;
        errorMsg = error.message;
        errorPath = _path;
    };
    (0, graphql_1.coerceInputValue)(argValue, argType, onError);
    return { isValid, errorMsg, errorPath };
}
//# sourceMappingURL=directive-argument-of-correct-type.js.map