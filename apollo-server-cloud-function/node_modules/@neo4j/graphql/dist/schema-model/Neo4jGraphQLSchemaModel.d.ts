import type { Operation } from "./Operation";
import type { Annotations, Annotation } from "./annotation/Annotation";
import { CompositeEntity } from "./entity/CompositeEntity";
import { ConcreteEntity } from "./entity/ConcreteEntity";
import type { Entity } from "./entity/Entity";
export type Operations = {
    Query?: Operation;
    Mutation?: Operation;
    Subscription?: Operation;
};
/** Represents the internal model for the Neo4jGraphQL schema */
export declare class Neo4jGraphQLSchemaModel {
    entities: Map<string, Entity>;
    concreteEntities: ConcreteEntity[];
    compositeEntities: CompositeEntity[];
    operations: Operations;
    readonly annotations: Partial<Annotations>;
    constructor({ concreteEntities, compositeEntities, operations, annotations, }: {
        concreteEntities: ConcreteEntity[];
        compositeEntities: CompositeEntity[];
        operations: Operations;
        annotations: Annotation[];
    });
    getEntity(name: string): Entity | undefined;
    getEntitiesByLabels(labels: string[]): ConcreteEntity[];
    getEntitiesByNameAndLabels(name: string, labels: string[]): ConcreteEntity[];
    isConcreteEntity(entity?: Entity): entity is ConcreteEntity;
    isCompositeEntity(entity?: Entity): entity is CompositeEntity;
    private addAnnotation;
}
//# sourceMappingURL=Neo4jGraphQLSchemaModel.d.ts.map