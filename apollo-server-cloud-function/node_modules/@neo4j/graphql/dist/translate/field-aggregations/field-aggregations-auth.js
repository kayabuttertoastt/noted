"use strict";
/*
 * Copyright (c) "Neo4j"
 * Neo4j Sweden AB [http://neo4j.com]
 *
 * This file is part of Neo4j.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.createFieldAggregationAuth = void 0;
const constants_1 = require("../../constants");
const create_auth_predicates_1 = require("../create-auth-predicates");
const cypher_builder_1 = __importDefault(require("@neo4j/cypher-builder"));
const create_authorization_before_predicate_1 = require("../authorization/create-authorization-before-predicate");
function createFieldAggregationAuth({ node, context, subqueryNodeAlias, nodeFields, }) {
    const authPredicates = [];
    let preComputedSubqueries;
    const authorizationPredicateReturn = (0, create_authorization_before_predicate_1.createAuthorizationBeforePredicate)({
        context,
        nodes: [
            {
                variable: subqueryNodeAlias,
                node,
            },
        ],
        operations: ["AGGREGATE"],
    });
    if (authorizationPredicateReturn) {
        const { predicate: authorizationPredicate, preComputedSubqueries: authorizationSubqueries } = authorizationPredicateReturn;
        if (authorizationPredicate) {
            authPredicates.push(authorizationPredicate);
        }
        if (authorizationSubqueries && !authorizationSubqueries.empty) {
            preComputedSubqueries = cypher_builder_1.default.concat(preComputedSubqueries, authorizationSubqueries);
        }
    }
    else {
        // TODO: Authorization - delete for 4.0.0
        const allowAuth = getAllowAuth({ node, context, varName: subqueryNodeAlias });
        if (allowAuth)
            authPredicates.push(allowAuth);
        const whereAuth = getWhereAuth({ node, context, varName: subqueryNodeAlias });
        if (whereAuth)
            authPredicates.push(whereAuth);
    }
    const nodeAuth = getFieldAuth({ fields: nodeFields, node, context, varName: subqueryNodeAlias });
    if (nodeAuth)
        authPredicates.push(nodeAuth);
    return { predicate: cypher_builder_1.default.and(...authPredicates), preComputedSubqueries };
}
exports.createFieldAggregationAuth = createFieldAggregationAuth;
// TODO: Authorization - delete for 4.0.0
function getAllowAuth({ node, context, varName, }) {
    const allowAuth = (0, create_auth_predicates_1.createAuthPredicates)({
        entity: node,
        operations: "READ",
        context,
        allow: { node, varName },
    });
    if (allowAuth)
        return cypher_builder_1.default.apoc.util.validatePredicate(cypher_builder_1.default.not(allowAuth), constants_1.AUTH_FORBIDDEN_ERROR);
    return undefined;
}
// TODO: Authorization - delete for 4.0.0
function getWhereAuth({ node, context, varName, }) {
    const allowAuth = (0, create_auth_predicates_1.createAuthPredicates)({
        entity: node,
        operations: "READ",
        context,
        where: { varName, node },
    });
    if (allowAuth) {
        return allowAuth;
    }
    return undefined;
}
function getFieldAuth({ fields = {}, node, context, varName, }) {
    const authPredicates = [];
    Object.entries(fields).forEach((selection) => {
        const authField = node.authableFields.find((x) => x.fieldName === selection[0]);
        if (authField && authField.auth) {
            const allowAuth = (0, create_auth_predicates_1.createAuthPredicates)({
                entity: authField,
                operations: "READ",
                context,
                allow: { node, varName },
            });
            if (allowAuth)
                authPredicates.push(allowAuth);
        }
    });
    if (authPredicates.length > 0) {
        return cypher_builder_1.default.apoc.util.validatePredicate(cypher_builder_1.default.not(cypher_builder_1.default.and(...authPredicates)), constants_1.AUTH_FORBIDDEN_ERROR);
    }
    return undefined;
}
//# sourceMappingURL=field-aggregations-auth.js.map